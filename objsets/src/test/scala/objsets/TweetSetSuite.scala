package objsets

import org.scalatest.FunSuite

import org.junit.runner.RunWith
import org.scalatest.junit.JUnitRunner

@RunWith(classOf[JUnitRunner])
class TweetSetSuite extends FunSuite {
  trait TestSets {
    val set1 = new Empty
    val set2 = set1.incl(new Tweet("a", "a body", 20))
    val set3 = set2.incl(new Tweet("b", "b body", 20))
    val c = new Tweet("c", "c body", 7)
    val d = new Tweet("d", "d body", 9)
    val set4c = set3.incl(c)
    val set4d = set3.incl(d)
    val set5 = set4c.incl(d)

    //additional test case
    val e = new Tweet("A", "A body", 7)
    val set6 = set5.incl(e)
  }

  def asSet(tweets: TweetSet): Set[Tweet] = {
    var res = Set[Tweet]()
    tweets.foreach(res += _)
    res
  }

  def size(set: TweetSet): Int = asSet(set).size

  test("filter: on empty set") {
    new TestSets {
      assert(size(set1.filter(tw => tw.user == "a")) === 0)
    }
  }

  test("filter: a on set5") {
    new TestSets {
      assert(size(set5.filter(tw => tw.user == "a")) === 1)
    }
  }

  test("filter: 20 on set5") {
    new TestSets {
      assert(size(set5.filter(tw => tw.retweets == 20)) === 2)
    }
  }

  test("filter: 7 on set6 for left node") {
    new TestSets {
      assert(size(set6.filter(tw => tw.retweets == 7)) === 2)
    }
  }

  test("union: set4c and set4d") {
    new TestSets {
      assert(size(set4c.union(set4d)) === 4)
    }
  }

  test("union: with empty set (1)") {
    new TestSets {
      assert(size(set5.union(set1)) === 4)
    }
  }

  test("union: with empty set (2)") {
    new TestSets {
      assert(size(set1.union(set5)) === 4)
    }
  }

  test("test for mostRetweeted") {
    new TestSets {
      assert(set6.mostRetweeted.retweets == 20)
    }
  }

  //below test code are generated by AI
  test("mostRetweeted: empty set throws") {
  val empty = new Empty
  intercept[java.util.NoSuchElementException] {
    empty.mostRetweeted
  }
}

  test("mostRetweeted: single element") {
    val t = new Tweet("u", "m", 42)
    val s = new Empty().incl(t)
    assert(s.mostRetweeted eq t)          // 같은 인스턴스여야 함
    assert(s.mostRetweeted.retweets == 42)
  }

  test("mostRetweeted: max is in LEFT subtree") {
    // 텍스트 순서: "a" < "m" < "z"  → b는 left, c는 right 로 들어감
    val a = new Tweet("a", "m", 1)
    val b = new Tweet("b", "a", 50)  // left
    val c = new Tweet("c", "z", 10)  // right
    val s = new Empty().incl(a).incl(b).incl(c)
    assert(s.mostRetweeted eq b)
    assert(s.mostRetweeted.retweets == 50)
  }

  test("mostRetweeted: max is in RIGHT subtree") {
    val a = new Tweet("a", "m", 1)
    val b = new Tweet("b", "a", 10)  // left
    val c = new Tweet("c", "z", 77)  // right (최대)
    val s = new Empty().incl(a).incl(b).incl(c)
    assert(s.mostRetweeted eq c)
    assert(s.mostRetweeted.retweets == 77)
  }

  test("mostRetweeted: ties allowed (either of the max)") {
    val a = new Tweet("a", "a body", 20)
    val b = new Tweet("b", "b body", 20)
    val s = new Empty().incl(a).incl(b)
    val top = s.mostRetweeted
    assert(top.retweets == 20)
    assert((top eq a) || (top eq b))      // 동률일 때 둘 중 하나면 OK
  }


  test("descending: set5") {
    new TestSets {
      val trends = set5.descendingByRetweet
      assert(!trends.isEmpty)
      assert(trends.head.user == "a" || trends.head.user == "b")
    }
  }

  //below test code are generated by AI
  test("descendingByRetweet: result is sorted non-increasing") {
    new TestSets {
      val trends = set5.descendingByRetweet
      var prev = Int.MaxValue
      var ok = true
      trends.foreach { t =>
        if (t.retweets > prev) ok = false
        prev = t.retweets
      }
      assert(ok, "The list is not sorted in descending order")
    }
  }

  test("descendingByRetweet: length matches set size") {
    new TestSets {
      val trends = set5.descendingByRetweet
      var count = 0
      trends.foreach(_ => count += 1)
      assert(count == size(set5), s"Expected ${size(set5)} but got $count")
    }
  }

  test("descendingByRetweet: contains all elements from set") {
    new TestSets {
      val trends = set5.descendingByRetweet
      val elemsFromList = scala.collection.mutable.Set[Tweet]()
      trends.foreach(elemsFromList += _)

      assert(elemsFromList.toSet == asSet(set5))
    }
  }

  test("descendingByRetweet: single element set") {
    val single = new Empty().incl(new Tweet("x", "only tweet", 42))
    val list = single.descendingByRetweet
    assert(!list.isEmpty)
    assert(list.head.retweets == 42)
    assert(list.tail.isEmpty)
  }

  test("descendingByRetweet: empty set") {
    val empty = new Empty
    val list = empty.descendingByRetweet
    assert(list.isEmpty)
  }
}
